import numpy as np
import nn_template as nn
import pandas as pd

def normalized(a, axis=-1, order=2):
    l2 = np.atleast_1d(np.linalg.norm(a, order, axis))
    l2[l2==0] = 1
    return a / np.expand_dims(l2, axis)

def check_initialize_parameters(n_x, n_h, n_y):
	parameters = nn.initialize_parameters(n_x, n_h, n_y)
	calc_W1 = parameters["W1"]
	calc_b1 = parameters["b1"]
	calc_W2 = parameters["W2"]
	calc_b2 = parameters["b2"]
	real_W1 = np.array([[-4.16757847e-03, -5.62668272e-04, -2.13619610e-02,
         1.64027081e-02],
       [-1.79343559e-02, -8.41747366e-03,  5.02881417e-03,
        -1.24528809e-02],
       [-1.05795222e-02, -9.09007615e-03,  5.51454045e-03,
         2.29220801e-02],
       [ 4.15393930e-04, -1.11792545e-02,  5.39058321e-03,
        -5.96159700e-03],
       [-1.91304965e-04,  1.17500122e-02, -7.47870949e-03,
         9.02525097e-05]])
	real_b1 = np.array([[0.],
       [0.],
       [0.],
       [0.],
       [0.]])
	real_W2 = np.array([[-0.00878108, -0.00156434,  0.0025657 , -0.00988779, -0.00338822]])
	real_b2 = np.array([[0.]])

	if calc_W1.shape[0]== n_h and calc_W1.shape[1]==n_x and calc_b1.shape[0]==n_h and calc_b1.shape[1]==1 and calc_W2.shape[0]==n_y and calc_W2.shape[1]==n_h and calc_b2.shape[0]==n_y and calc_b2.shape[1]==1:
		print("PASSED : initialize_parameters function")
	else:
		print("FAILED : initialize_parameters function")

	parameters["W1"] = real_W1
	parameters["b1"] = real_b1
	parameters["W2"] = real_W2
	parameters["b2"] = real_b2
	
	return parameters



	
def check_forward_propagation(X, parameters):
	real_A2 = np.array([[0.50000655, 0.50000621, 0.50000661, 0.5000054 , 0.50000632,
        0.50000558, 0.50000627, 0.50000459, 0.50000619, 0.50000525,
        0.50000472, 0.50000584, 0.50000545, 0.50000597, 0.50000536,
        0.5000063 , 0.5000057 , 0.5000053 , 0.50000614, 0.50000524,
        0.50000622, 0.50000576, 0.50000626, 0.50000579, 0.50000601,
        0.50000624, 0.50000646, 0.5000067 , 0.50000597, 0.50000514,
        0.50000517, 0.50000506, 0.50000546, 0.50000618, 0.50000556,
        0.50000603, 0.50000645, 0.50000599, 0.50000544, 0.50000539,
        0.50000535, 0.50000595, 0.50000548, 0.50000466, 0.50000547,
        0.50000543, 0.50000553, 0.50000587, 0.50000476, 0.50000552,
        0.50000734, 0.50000633, 0.50000749, 0.50000664, 0.50000717,
        0.50000794, 0.50000545, 0.50000741, 0.50000696, 0.50000793,
        0.50000685, 0.50000676, 0.50000723, 0.50000635, 0.5000068 ,
        0.50000711, 0.50000674, 0.50000807, 0.50000827, 0.50000609,
        0.5000075 , 0.50000625, 0.50000794, 0.50000653, 0.50000718,
        0.50000728, 0.50000644, 0.50000638, 0.50000699, 0.50000707,
        0.50000755, 0.50000796, 0.50000709, 0.50000627, 0.50000614,
        0.50000811, 0.50000717, 0.50000667, 0.50000629, 0.50000727,
        0.50000746, 0.50000741, 0.50000633, 0.50000747, 0.50000755,
        0.5000073 , 0.50000665, 0.50000688, 0.50000698, 0.50000628]])
	real_Z1 = np.array([[-9.98595474e-04, -7.81538309e-04, -1.04141798e-03,
        -9.38433198e-04, -1.05078950e-03, -7.64492659e-04,
        -7.10887333e-04, -6.09726932e-04, -1.02146816e-03,
        -6.04585309e-04, -8.87356352e-04, -7.00247091e-04,
        -1.15503404e-03, -8.63471686e-04, -5.98425838e-04,
        -9.28419518e-04, -6.23603783e-04, -8.11876570e-04,
        -1.28105370e-03, -8.43996886e-04, -6.46808904e-04,
        -8.58305505e-04, -1.17828241e-03, -9.13697823e-04,
        -9.28481462e-04, -9.51230256e-04, -1.16606866e-03,
        -1.04519155e-03, -8.16044524e-04, -7.84417921e-04,
        -8.58429393e-04, -8.46795861e-04, -8.01630710e-04,
        -9.83042692e-04, -5.55751782e-04, -5.35616130e-04,
        -9.56809513e-04, -1.24335413e-03, -5.83580255e-04,
        -8.24959719e-04, -7.98480604e-04, -7.98356716e-04,
        -8.66745681e-04, -7.00389672e-04, -7.62168704e-04,
        -6.22629186e-04, -6.82621226e-04, -8.60629460e-04,
        -5.98962802e-04, -7.30979734e-04, -8.49102052e-04,
        -9.24956595e-04, -1.26932084e-03, -1.01974897e-03,
        -1.06064190e-03, -1.49759846e-03, -6.76316078e-04,
        -1.41765660e-03, -1.39915640e-03, -9.92604071e-04,
        -8.82010204e-04, -1.14526906e-03, -1.13402991e-03,
        -9.99381143e-04, -8.84496362e-04, -8.74606570e-04,
        -1.02248600e-03, -1.08926408e-03, -1.79011671e-03,
        -1.25509286e-03, -1.07774950e-03, -7.86866693e-04,
        -1.65012087e-03, -1.07457483e-03, -9.46650155e-04,
        -1.18838569e-03, -9.75533863e-04, -8.36512615e-04,
        -1.12017762e-03, -1.27859210e-03, -1.49481818e-03,
        -1.12547078e-03, -1.12343292e-03, -1.02482865e-03,
        -1.10908599e-03, -1.49614391e-03, -7.55597086e-04,
        -9.31823265e-04, -7.94208383e-04, -1.10284094e-03,
        -1.06151131e-03, -1.08421685e-03, -9.24956595e-04,
        -1.06057996e-03, -9.59671360e-04, -1.08147982e-03,
        -1.19968184e-03, -1.00386191e-03, -7.01659322e-04,
        -7.85417076e-04],
       [-3.19565135e-03, -3.22016133e-03, -3.28137072e-03,
        -2.62670238e-03, -3.07593152e-03, -3.00637143e-03,
        -3.39202938e-03, -2.31922011e-03, -3.01362124e-03,
        -2.83560426e-03, -2.21104438e-03, -3.06578298e-03,
        -2.39759831e-03, -3.13830693e-03, -2.73294562e-03,
        -3.06837432e-03, -3.19790474e-03, -2.66499712e-03,
        -2.80539093e-03, -2.57141237e-03, -3.51435327e-03,
        -2.79415502e-03, -3.07084374e-03, -2.99783448e-03,
        -2.92143204e-03, -3.03328649e-03, -3.07538108e-03,
        -3.38772159e-03, -3.12288435e-03, -2.41358485e-03,
        -2.50027046e-03, -2.41551733e-03, -2.69028708e-03,
        -3.30175916e-03, -3.21387776e-03, -3.38695511e-03,
        -3.22523560e-03, -2.70702658e-03, -2.95629033e-03,
        -2.71285106e-03, -2.85144264e-03, -3.14532720e-03,
        -2.68326681e-03, -2.26815926e-03, -2.86312138e-03,
        -2.93565884e-03, -2.94128355e-03, -2.93740507e-03,
        -2.28685826e-03, -2.86215514e-03, -4.29902384e-03,
        -3.46382935e-03, -3.87505842e-03, -3.64161679e-03,
        -3.93562248e-03, -4.08750438e-03, -3.13583672e-03,
        -3.81413019e-03, -3.50948152e-03, -4.39242233e-03,
        -3.67199454e-03, -3.48801843e-03, -3.75480167e-03,
        -3.39831216e-03, -3.75039897e-03, -3.89818636e-03,
        -3.63266403e-03, -4.50886573e-03, -4.11278083e-03,
        -3.00163432e-03, -4.00247010e-03, -3.49946763e-03,
        -3.98072420e-03, -3.30308959e-03, -3.96411935e-03,
        -3.84317750e-03, -3.31809637e-03, -3.44828564e-03,
        -3.73665310e-03, -3.58752256e-03, -3.73966024e-03,
        -4.28733238e-03, -3.78535216e-03, -3.27217491e-03,
        -3.33357056e-03, -3.99664561e-03, -4.14918283e-03,
        -3.68372489e-03, -3.42021808e-03, -3.75383542e-03,
        -3.98801376e-03, -3.74307131e-03, -3.46382935e-03,
        -4.08256476e-03, -4.15891557e-03, -3.75202407e-03,
        -3.30169404e-03, -3.62189993e-03, -4.03636214e-03,
        -3.53636681e-03],
       [ 1.41436365e-03,  1.35176254e-03,  1.23119142e-03,
         7.70879580e-04,  1.02210345e-03,  1.07848925e-03,
         1.32716463e-03,  1.10426909e-03,  1.21532928e-03,
         1.03043246e-03,  7.53341604e-04,  1.21320381e-03,
         8.93153148e-04,  1.09768092e-03,  1.34043400e-03,
         1.37260791e-03,  1.12312489e-03,  1.25080471e-03,
         5.41375143e-04,  1.06466096e-03,  1.08639665e-03,
         1.21986287e-03,  7.02920972e-04,  1.12357452e-03,
         1.26161861e-03,  1.28456284e-03,  1.05843080e-03,
         1.00793928e-03,  1.07886940e-03,  1.29036997e-03,
         9.97884272e-04,  1.07174304e-03,  1.18816073e-03,
         7.40094373e-04,  1.10560905e-03,  1.42271481e-03,
         1.25621236e-03,  7.55869365e-04,  1.31337920e-03,
         9.29453893e-04,  9.76257868e-04,  1.19823647e-03,
         1.08760518e-03,  1.03373985e-03,  1.05424934e-03,
         1.35345911e-03,  1.22158158e-03,  1.24410278e-03,
         1.21228688e-03,  1.16356281e-03,  5.77362152e-04,
         5.64807402e-04,  6.41193930e-04,  7.13419734e-04,
         5.57324433e-04,  5.36104792e-04,  5.60202922e-04,
         6.52120186e-04,  3.88766001e-04,  8.72776494e-04,
         9.69958232e-04,  5.74818130e-04,  6.99993735e-04,
         3.66153182e-04,  3.81142666e-04,  7.60892399e-04,
         8.31491117e-04,  1.10530119e-03,  5.87281576e-05,
         4.17517359e-04,  7.19608430e-04,  6.16525123e-04,
         4.17610385e-04,  7.03724150e-04,  8.86560507e-04,
         9.45028907e-04,  7.95521778e-04,  9.24069783e-04,
         4.85119360e-04,  9.34172130e-04,  5.71537348e-04,
         1.29180296e-03,  4.32528982e-04,  8.98245662e-04,
         6.68403942e-04,  5.46023902e-04,  7.94313246e-04,
         9.02020355e-04,  9.36580255e-04,  8.09307199e-04,
         5.91483449e-04,  7.67931612e-04,  5.64807402e-04,
         6.68313732e-04,  6.76198993e-04,  6.49860230e-04,
         4.71291068e-04,  7.90115529e-04,  8.80682486e-04,
         8.64017168e-04],
       [-9.26833555e-04, -1.04454731e-03, -9.77780627e-04,
        -8.10827962e-04, -9.52666849e-04, -8.92635852e-04,
        -1.13673654e-03, -6.94629162e-04, -8.35372354e-04,
        -9.84507794e-04, -6.01913620e-04, -1.04861567e-03,
        -5.53369824e-04, -9.42019810e-04, -9.29333719e-04,
        -9.34400884e-04, -1.07179359e-03, -6.72762259e-04,
        -8.55458609e-04, -7.14989630e-04, -1.27887912e-03,
        -8.62567036e-04, -9.05420472e-04, -7.92044208e-04,
        -8.54999708e-04, -9.22340858e-04, -8.60636260e-04,
        -1.10280110e-03, -1.01692829e-03, -6.65712720e-04,
        -7.03764685e-04, -6.39922506e-04, -8.03786942e-04,
        -1.03535290e-03, -1.08891570e-03, -1.18471095e-03,
        -9.96572900e-04, -7.38999195e-04, -9.45779394e-04,
        -8.52070125e-04, -8.04673621e-04, -9.63475972e-04,
        -7.82330780e-04, -6.65447026e-04, -8.83081069e-04,
        -8.71705997e-04, -9.15762176e-04, -8.72121819e-04,
        -7.65310637e-04, -8.95976176e-04, -1.70797583e-03,
        -1.24650679e-03, -1.31975019e-03, -1.17609101e-03,
        -1.43662886e-03, -1.27109934e-03, -1.15797009e-03,
        -1.08463489e-03, -1.05769230e-03, -1.69195450e-03,
        -1.35436207e-03, -1.19347030e-03, -1.34877368e-03,
        -1.27933803e-03, -1.59051417e-03, -1.55528474e-03,
        -1.18042506e-03, -1.49134911e-03, -1.30690324e-03,
        -8.68405314e-04, -1.50913914e-03, -1.35059740e-03,
        -1.15578378e-03, -1.14069442e-03, -1.41752781e-03,
        -1.15756443e-03, -1.17071163e-03, -1.21967977e-03,
        -1.34094065e-03, -9.88637910e-04, -1.12180017e-03,
        -1.34737773e-03, -1.40561792e-03, -9.65613553e-04,
        -8.72640835e-04, -1.39606821e-03, -1.66725998e-03,
        -1.20960720e-03, -1.22907591e-03, -1.36166878e-03,
        -1.57115251e-03, -1.49352855e-03, -1.24650679e-03,
        -1.51603004e-03, -1.67623685e-03, -1.48919450e-03,
        -1.16329443e-03, -1.31228483e-03, -1.61281394e-03,
        -1.23513172e-03],
       [ 1.12213387e-04,  2.52225804e-04,  1.90988707e-04,
         2.22276194e-04,  2.38715175e-04,  1.98159542e-04,
         3.31625489e-04,  9.26062763e-05,  9.11913176e-05,
         3.27520813e-04,  7.87110600e-05,  3.12141768e-04,
        -4.13606445e-05,  2.18172660e-04,  2.13810322e-04,
         1.48686906e-04,  3.46619946e-04, -1.64296942e-05,
         2.72858609e-04,  7.54491056e-05,  5.14396699e-04,
         1.52573225e-04,  2.60379494e-04,  8.19017515e-05,
         1.16099706e-04,  1.60252037e-04,  1.34334698e-04,
         3.50005291e-04,  2.98798511e-04, -2.55704000e-06,
         8.73988239e-05,  1.98040479e-05,  1.20298207e-04,
         3.63845987e-04,  3.70374573e-04,  3.68338785e-04,
         2.15512508e-04,  1.25719339e-04,  2.12199569e-04,
         2.22900558e-04,  1.53695028e-04,  2.18869429e-04,
         1.19601437e-04,  8.04167808e-05,  2.10878435e-04,
         1.31958305e-04,  1.99625486e-04,  1.39854332e-04,
         1.38296957e-04,  1.99697891e-04,  9.38440124e-04,
         5.91538703e-04,  5.70952206e-04,  4.62874202e-04,
         7.10580036e-04,  5.08873529e-04,  5.64158955e-04,
         3.41408959e-04,  4.13347045e-04,  8.32096264e-04,
         5.77937784e-04,  5.19505649e-04,  6.08122494e-04,
         6.71155602e-04,  9.31747701e-04,  7.92984012e-04,
         4.39816344e-04,  5.67088449e-04,  6.30552452e-04,
         2.94690300e-04,  7.32059097e-04,  6.84354049e-04,
         4.28007901e-04,  4.64941948e-04,  6.20167180e-04,
         3.55376580e-04,  4.77516030e-04,  4.89633121e-04,
         6.54622796e-04,  2.19562664e-04,  3.97968001e-04,
         4.08528858e-04,  7.22602159e-04,  2.60546866e-04,
         2.13774829e-04,  6.34877878e-04,  8.72311292e-04,
         4.52005840e-04,  5.01895021e-04,  5.96941950e-04,
         8.23865492e-04,  7.34054438e-04,  5.91538703e-04,
         7.43167236e-04,  8.92084632e-04,  7.57112295e-04,
         5.31912359e-04,  5.76928832e-04,  8.16978416e-04,
         5.12618573e-04]])
	real_A1 = np.array([[-9.98595142e-04, -7.81538150e-04, -1.04141760e-03,
        -9.38432922e-04, -1.05078911e-03, -7.64492510e-04,
        -7.10887213e-04, -6.09726857e-04, -1.02146780e-03,
        -6.04585236e-04, -8.87356119e-04, -7.00246976e-04,
        -1.15503352e-03, -8.63471472e-04, -5.98425767e-04,
        -9.28419251e-04, -6.23603702e-04, -8.11876392e-04,
        -1.28105300e-03, -8.43996686e-04, -6.46808814e-04,
        -8.58305295e-04, -1.17828186e-03, -9.13697568e-04,
        -9.28481195e-04, -9.51229969e-04, -1.16606813e-03,
        -1.04519117e-03, -8.16044343e-04, -7.84417760e-04,
        -8.58429183e-04, -8.46795658e-04, -8.01630538e-04,
        -9.83042375e-04, -5.55751724e-04, -5.35616078e-04,
        -9.56809221e-04, -1.24335349e-03, -5.83580189e-04,
        -8.24959532e-04, -7.98480434e-04, -7.98356546e-04,
        -8.66745464e-04, -7.00389558e-04, -7.62168557e-04,
        -6.22629105e-04, -6.82621120e-04, -8.60629248e-04,
        -5.98962730e-04, -7.30979604e-04, -8.49101848e-04,
        -9.24956331e-04, -1.26932016e-03, -1.01974862e-03,
        -1.06064151e-03, -1.49759734e-03, -6.76315975e-04,
        -1.41765565e-03, -1.39915548e-03, -9.92603745e-04,
        -8.82009975e-04, -1.14526856e-03, -1.13402942e-03,
        -9.99380810e-04, -8.84496132e-04, -8.74606347e-04,
        -1.02248565e-03, -1.08926365e-03, -1.79011480e-03,
        -1.25509220e-03, -1.07774908e-03, -7.86866531e-04,
        -1.65011937e-03, -1.07457442e-03, -9.46649872e-04,
        -1.18838513e-03, -9.75533553e-04, -8.36512420e-04,
        -1.12017715e-03, -1.27859140e-03, -1.49481706e-03,
        -1.12547031e-03, -1.12343245e-03, -1.02482829e-03,
        -1.10908553e-03, -1.49614279e-03, -7.55596942e-04,
        -9.31822995e-04, -7.94208216e-04, -1.10284049e-03,
        -1.06151091e-03, -1.08421643e-03, -9.24956331e-04,
        -1.06057956e-03, -9.59671066e-04, -1.08147940e-03,
        -1.19968127e-03, -1.00386158e-03, -7.01659207e-04,
        -7.85416915e-04],
       [-3.19564047e-03, -3.22015020e-03, -3.28135894e-03,
        -2.62669634e-03, -3.07592182e-03, -3.00636237e-03,
        -3.39201637e-03, -2.31921595e-03, -3.01361212e-03,
        -2.83559666e-03, -2.21104077e-03, -3.06577338e-03,
        -2.39759372e-03, -3.13829663e-03, -2.73293882e-03,
        -3.06836469e-03, -3.19789384e-03, -2.66499081e-03,
        -2.80538357e-03, -2.57140670e-03, -3.51433881e-03,
        -2.79414775e-03, -3.07083409e-03, -2.99782549e-03,
        -2.92142373e-03, -3.03327719e-03, -3.07537138e-03,
        -3.38770863e-03, -3.12287420e-03, -2.41358016e-03,
        -2.50026525e-03, -2.41551263e-03, -2.69028059e-03,
        -3.30174716e-03, -3.21386670e-03, -3.38694216e-03,
        -3.22522441e-03, -2.70701997e-03, -2.95628172e-03,
        -2.71284441e-03, -2.85143491e-03, -3.14531682e-03,
        -2.68326037e-03, -2.26815537e-03, -2.86311356e-03,
        -2.93565041e-03, -2.94127507e-03, -2.93739662e-03,
        -2.28685428e-03, -2.86214732e-03, -4.29899736e-03,
        -3.46381550e-03, -3.87503903e-03, -3.64160069e-03,
        -3.93560216e-03, -4.08748162e-03, -3.13582644e-03,
        -3.81411169e-03, -3.50946711e-03, -4.39239409e-03,
        -3.67197803e-03, -3.48800428e-03, -3.75478402e-03,
        -3.39829908e-03, -3.75038139e-03, -3.89816662e-03,
        -3.63264806e-03, -4.50883518e-03, -4.11275764e-03,
        -3.00162531e-03, -4.00244872e-03, -3.49945334e-03,
        -3.98070318e-03, -3.30307758e-03, -3.96409859e-03,
        -3.84315858e-03, -3.31808419e-03, -3.44827197e-03,
        -3.73663571e-03, -3.58750717e-03, -3.73964281e-03,
        -4.28730611e-03, -3.78533408e-03, -3.27216323e-03,
        -3.33355822e-03, -3.99662433e-03, -4.14915902e-03,
        -3.68370823e-03, -3.42020474e-03, -3.75381779e-03,
        -3.98799262e-03, -3.74305383e-03, -3.46381550e-03,
        -4.08254207e-03, -4.15889160e-03, -3.75200646e-03,
        -3.30168204e-03, -3.62188409e-03, -4.03634022e-03,
        -3.53635207e-03],
       [ 1.41436271e-03,  1.35176172e-03,  1.23119080e-03,
         7.70879427e-04,  1.02210309e-03,  1.07848883e-03,
         1.32716385e-03,  1.10426864e-03,  1.21532868e-03,
         1.03043210e-03,  7.53341462e-04,  1.21320322e-03,
         8.93152911e-04,  1.09768048e-03,  1.34043319e-03,
         1.37260705e-03,  1.12312442e-03,  1.25080405e-03,
         5.41375090e-04,  1.06466055e-03,  1.08639622e-03,
         1.21986227e-03,  7.02920856e-04,  1.12357405e-03,
         1.26161794e-03,  1.28456213e-03,  1.05843040e-03,
         1.00793894e-03,  1.07886898e-03,  1.29036925e-03,
         9.97883941e-04,  1.07174263e-03,  1.18816017e-03,
         7.40094238e-04,  1.10560860e-03,  1.42271385e-03,
         1.25621170e-03,  7.55869221e-04,  1.31337845e-03,
         9.29453625e-04,  9.76257558e-04,  1.19823589e-03,
         1.08760475e-03,  1.03373949e-03,  1.05424895e-03,
         1.35345828e-03,  1.22158097e-03,  1.24410213e-03,
         1.21228628e-03,  1.16356228e-03,  5.77362088e-04,
         5.64807342e-04,  6.41193842e-04,  7.13419613e-04,
         5.57324376e-04,  5.36104740e-04,  5.60202863e-04,
         6.52120093e-04,  3.88765981e-04,  8.72776272e-04,
         9.69957928e-04,  5.74818067e-04,  6.99993621e-04,
         3.66153166e-04,  3.81142647e-04,  7.60892252e-04,
         8.31490925e-04,  1.10530074e-03,  5.87281575e-05,
         4.17517334e-04,  7.19608306e-04,  6.16525045e-04,
         4.17610361e-04,  7.03724033e-04,  8.86560275e-04,
         9.45028625e-04,  7.95521610e-04,  9.24069520e-04,
         4.85119322e-04,  9.34171858e-04,  5.71537286e-04,
         1.29180224e-03,  4.32528955e-04,  8.98245420e-04,
         6.68403843e-04,  5.46023847e-04,  7.94313079e-04,
         9.02020110e-04,  9.36579981e-04,  8.09307023e-04,
         5.91483380e-04,  7.67931461e-04,  5.64807342e-04,
         6.68313633e-04,  6.76198890e-04,  6.49860138e-04,
         4.71291033e-04,  7.90115364e-04,  8.80682258e-04,
         8.64016953e-04],
       [-9.26833290e-04, -1.04454693e-03, -9.77780316e-04,
        -8.10827785e-04, -9.52666561e-04, -8.92635614e-04,
        -1.13673605e-03, -6.94629051e-04, -8.35372159e-04,
        -9.84507476e-04, -6.01913548e-04, -1.04861528e-03,
        -5.53369767e-04, -9.42019531e-04, -9.29333451e-04,
        -9.34400612e-04, -1.07179318e-03, -6.72762157e-04,
        -8.55458400e-04, -7.14989508e-04, -1.27887843e-03,
        -8.62566822e-04, -9.05420225e-04, -7.92044042e-04,
        -8.54999500e-04, -9.22340596e-04, -8.60636048e-04,
        -1.10280065e-03, -1.01692794e-03, -6.65712622e-04,
        -7.03764569e-04, -6.39922419e-04, -8.03786769e-04,
        -1.03535253e-03, -1.08891527e-03, -1.18471040e-03,
        -9.96572571e-04, -7.38999061e-04, -9.45779112e-04,
        -8.52069918e-04, -8.04673447e-04, -9.63475674e-04,
        -7.82330620e-04, -6.65446928e-04, -8.83080840e-04,
        -8.71705776e-04, -9.15761920e-04, -8.72121597e-04,
        -7.65310488e-04, -8.95975937e-04, -1.70797417e-03,
        -1.24650614e-03, -1.31974942e-03, -1.17609047e-03,
        -1.43662787e-03, -1.27109866e-03, -1.15796957e-03,
        -1.08463446e-03, -1.05769191e-03, -1.69195288e-03,
        -1.35436124e-03, -1.19346973e-03, -1.34877286e-03,
        -1.27933733e-03, -1.59051283e-03, -1.55528349e-03,
        -1.18042451e-03, -1.49134801e-03, -1.30690249e-03,
        -8.68405095e-04, -1.50913800e-03, -1.35059658e-03,
        -1.15578327e-03, -1.14069392e-03, -1.41752686e-03,
        -1.15756391e-03, -1.17071110e-03, -1.21967917e-03,
        -1.34093985e-03, -9.88637588e-04, -1.12179970e-03,
        -1.34737691e-03, -1.40561699e-03, -9.65613253e-04,
        -8.72640614e-04, -1.39606731e-03, -1.66725843e-03,
        -1.20960661e-03, -1.22907529e-03, -1.36166794e-03,
        -1.57115122e-03, -1.49352744e-03, -1.24650614e-03,
        -1.51602887e-03, -1.67623528e-03, -1.48919340e-03,
        -1.16329391e-03, -1.31228407e-03, -1.61281254e-03,
        -1.23513109e-03],
       [ 1.12213387e-04,  2.52225799e-04,  1.90988705e-04,
         2.22276190e-04,  2.38715171e-04,  1.98159540e-04,
         3.31625476e-04,  9.26062760e-05,  9.11913173e-05,
         3.27520801e-04,  7.87110598e-05,  3.12141758e-04,
        -4.13606444e-05,  2.18172657e-04,  2.13810319e-04,
         1.48686905e-04,  3.46619932e-04, -1.64296942e-05,
         2.72858602e-04,  7.54491055e-05,  5.14396653e-04,
         1.52573224e-04,  2.60379488e-04,  8.19017513e-05,
         1.16099705e-04,  1.60252036e-04,  1.34334697e-04,
         3.50005276e-04,  2.98798502e-04, -2.55704000e-06,
         8.73988237e-05,  1.98040479e-05,  1.20298206e-04,
         3.63845971e-04,  3.70374556e-04,  3.68338768e-04,
         2.15512505e-04,  1.25719338e-04,  2.12199565e-04,
         2.22900554e-04,  1.53695027e-04,  2.18869426e-04,
         1.19601437e-04,  8.04167807e-05,  2.10878432e-04,
         1.31958304e-04,  1.99625483e-04,  1.39854331e-04,
         1.38296956e-04,  1.99697888e-04,  9.38439849e-04,
         5.91538634e-04,  5.70952144e-04,  4.62874169e-04,
         7.10579916e-04,  5.08873485e-04,  5.64158895e-04,
         3.41408945e-04,  4.13347022e-04,  8.32096072e-04,
         5.77937720e-04,  5.19505602e-04,  6.08122419e-04,
         6.71155501e-04,  9.31747431e-04,  7.92983846e-04,
         4.39816316e-04,  5.67088388e-04,  6.30552368e-04,
         2.94690291e-04,  7.32058967e-04,  6.84353942e-04,
         4.28007875e-04,  4.64941914e-04,  6.20167100e-04,
         3.55376565e-04,  4.77515994e-04,  4.89633082e-04,
         6.54622702e-04,  2.19562660e-04,  3.97967980e-04,
         4.08528835e-04,  7.22602033e-04,  2.60546860e-04,
         2.13774826e-04,  6.34877793e-04,  8.72311070e-04,
         4.52005809e-04,  5.01894979e-04,  5.96941879e-04,
         8.23865306e-04,  7.34054306e-04,  5.91538634e-04,
         7.43167099e-04,  8.92084396e-04,  7.57112151e-04,
         5.31912309e-04,  5.76928768e-04,  8.16978234e-04,
         5.12618528e-04]])
	real_Z2 = np.array([[2.61807830e-05, 2.48420494e-05, 2.64577838e-05, 2.15915277e-05,
        2.52722174e-05, 2.23379167e-05, 2.50699277e-05, 1.83699091e-05,
        2.47530915e-05, 2.10134283e-05, 1.88685237e-05, 2.33684455e-05,
        2.17964061e-05, 2.38831781e-05, 2.14338477e-05, 2.52095713e-05,
        2.27833593e-05, 2.12150992e-05, 2.45607031e-05, 2.09793930e-05,
        2.48670708e-05, 2.30495829e-05, 2.50242897e-05, 2.31496973e-05,
        2.40207951e-05, 2.49706558e-05, 2.58205212e-05, 2.67818805e-05,
        2.38618266e-05, 2.05654953e-05, 2.06720292e-05, 2.02245599e-05,
        2.18362455e-05, 2.47006554e-05, 2.22564061e-05, 2.41180408e-05,
        2.57939355e-05, 2.39731296e-05, 2.17515265e-05, 2.15424066e-05,
        2.14126166e-05, 2.37901693e-05, 2.19292542e-05, 1.86579462e-05,
        2.18936574e-05, 2.17044301e-05, 2.21080120e-05, 2.34938423e-05,
        1.90459782e-05, 2.20641251e-05, 2.93709221e-05, 2.53107631e-05,
        2.99678941e-05, 2.65422417e-05, 2.86976076e-05, 3.17644068e-05,
        2.18198693e-05, 2.96561374e-05, 2.78312846e-05, 3.17369745e-05,
        2.74113133e-05, 2.70285170e-05, 2.89036750e-05, 2.54069808e-05,
        2.71813005e-05, 2.84217905e-05, 2.69761860e-05, 3.22788607e-05,
        3.30895049e-05, 2.43759896e-05, 3.00129632e-05, 2.50013736e-05,
        3.17664313e-05, 2.61122299e-05, 2.87034100e-05, 2.91136367e-05,
        2.57557450e-05, 2.55115942e-05, 2.79673387e-05, 2.82678229e-05,
        3.01862991e-05, 3.18424334e-05, 2.83463583e-05, 2.50875034e-05,
        2.45728900e-05, 3.24436855e-05, 2.86935521e-05, 2.66881485e-05,
        2.51796699e-05, 2.90741429e-05, 2.98211433e-05, 2.96268396e-05,
        2.53107631e-05, 2.98863815e-05, 3.02194869e-05, 2.91928952e-05,
        2.66088191e-05, 2.75288832e-05, 2.79141614e-05, 2.51215364e-05]])
	calc_cache = nn.forward_propagation(X, parameters)
	calc_A1 = calc_cache["A1"]
	calc_Z1 = calc_cache["Z1"]
	calc_A2 = calc_cache["A2"]
	calc_Z2 = calc_cache["Z2"]

	if np.all(np.isclose(real_A1, calc_A1)) and np.all(np.isclose(real_Z1, calc_Z1)) and np.all(np.isclose(real_A2, calc_A2)) and np.all(np.isclose(real_Z2, calc_Z2)):
		print("PASSED : forward_propagation function")
	else:
		print("FAILED : forward_propagation function")

	return calc_cache


def check_compute_cost(A2, Y, parameters):
	calc_cost = nn.compute_cost(A2, Y, parameters)
	real_cost = 0.6931484819548224


	if(calc_cost == real_cost):
		print("PASSED : compute_cost function")
	else:
		print("FAILED : compute_cost function")

def check_backward_propagation(parameters, cache, X, Y):
	grads = nn.backward_propagation(parameters, cache, X, Y)
	real_dW1 = np.array([[-5.70243916e-05, -8.89101023e-05, -2.27369524e-05,
        -1.54960476e-05],
       [-1.01585428e-05, -1.58388960e-05, -4.05032558e-06,
        -2.76037755e-06],
       [ 1.66617852e-05,  2.59783274e-05,  6.64349007e-06,
         4.52780051e-06],
       [-6.42112562e-05, -1.00115607e-04, -2.56024536e-05,
        -1.74489420e-05],
       [-2.20031561e-05, -3.43064078e-05, -8.77317951e-06,
        -5.97923767e-06]])
	real_db1 = np.array([[-5.49425628e-08],
       [-7.78305614e-09],
       [ 1.68434363e-08],
       [-6.06713159e-08],
       [-2.13291230e-08]])
	real_dW2 = np.array([[-5.91283125e-05, -2.10647154e-04, -1.06012504e-04,
        -1.07057188e-04,  9.85234565e-05]])
	real_db2 = np.array([[6.37599575e-06]])

	calc_dW1 = grads["dW1"]
	calc_db1 = grads["db1"]
	calc_dW2 = grads["dW2"]
	calc_db2 = grads["db2"]

	if np.all(np.isclose(real_dW1, calc_dW1)) and np.all(np.isclose(real_db1, calc_db1)) and np.all(np.isclose(real_dW2, calc_dW2)) and np.all(np.isclose(real_db2, calc_db2)):
		print("PASSED : backward_propagation function")
	else:
		print("FAILED : backward_propagation function")

	return grads
	
def check_update_parameters(parameters, grads, alpha):
	parameters = nn.update_parameters(parameters, grads, alpha)
	calc_W1 = parameters["W1"]
	calc_b1 = parameters["b1"]
	calc_W2 = parameters["W2"]
	calc_b2 = parameters["b2"]

	real_W1 = np.array([[-4.09914920e-03, -4.55976150e-04, -2.13346766e-02,
         1.64213033e-02],
       [-1.79221656e-02, -8.39846698e-03,  5.03367456e-03,
        -1.24495684e-02],
       [-1.05995163e-02, -9.12125014e-03,  5.50656826e-03,
         2.29166468e-02],
       [ 4.92447437e-04, -1.10591157e-02,  5.42130615e-03,
        -5.94065827e-03],
       [-1.64901178e-04,  1.17911799e-02, -7.46818168e-03,
         9.74275949e-05]])
	real_b1 = np.array([[ 6.59310753e-08],
       [ 9.33966737e-09],
       [-2.02121235e-08],
       [ 7.28055791e-08],
       [ 2.55949476e-08]])
	real_W2 = np.array([[-0.00871012, -0.00131157,  0.00269292, -0.00975932, -0.00350645]])
	real_b2 = np.array([[-7.6511949e-06]])


	if np.all(np.isclose(real_W1, calc_W1)) and np.all(np.isclose(real_W2, calc_W2)) and np.all(np.isclose(real_b1, calc_b1)) and np.all(np.isclose(real_b2, calc_b2)):
		print("PASSED : update_parameters function")
	else:
		print("FAILED : update_parameters function")
	return parameters


def check_predict(X, parameters):
	calc_y_predicted = nn.predict(X, parameters)
	real_y_predicted = np.array([[0.50000277, 0.50000242, 0.5000028 , 0.50000168, 0.50000252,
        0.50000183, 0.50000243, 0.500001  , 0.50000244, 0.50000152,
        0.50000111, 0.50000207, 0.50000182, 0.50000218, 0.50000167,
        0.50000254, 0.50000189, 0.50000166, 0.50000235, 0.50000159,
        0.50000232, 0.50000205, 0.50000243, 0.50000205, 0.50000228,
        0.50000248, 0.50000267, 0.50000282, 0.50000217, 0.50000154,
        0.50000152, 0.50000144, 0.50000178, 0.50000231, 0.50000176,
        0.50000221, 0.50000264, 0.50000226, 0.50000172, 0.50000167,
        0.50000163, 0.50000217, 0.5000018 , 0.50000107, 0.50000174,
        0.50000172, 0.5000018 , 0.50000214, 0.50000117, 0.5000018 ,
        0.50000319, 0.50000239, 0.50000345, 0.50000268, 0.50000311,
        0.50000386, 0.5000016 , 0.50000342, 0.500003  , 0.50000378,
        0.50000289, 0.50000281, 0.50000321, 0.50000239, 0.50000273,
        0.50000305, 0.5000028 , 0.50000395, 0.50000412, 0.50000226,
        0.50000343, 0.5000023 , 0.50000387, 0.50000263, 0.50000315,
        0.50000331, 0.50000255, 0.50000248, 0.50000297, 0.50000316,
        0.50000355, 0.50000391, 0.50000304, 0.50000243, 0.50000229,
        0.50000402, 0.50000307, 0.50000273, 0.5000024 , 0.50000327,
        0.50000336, 0.50000338, 0.50000239, 0.50000338, 0.50000343,
        0.50000326, 0.50000272, 0.50000291, 0.50000292, 0.50000236]])
	if np.all(np.isclose(real_y_predicted, calc_y_predicted)):
		print("PASSED : predict function")
	else:
		print("FAILED : predict function")

if __name__ == "__main__":
	
	df = pd.read_csv("./iris.csv")
	#assigning numbers to classes
	mapping = {'virginica':0, 'versicolor':1, 'setosa':2 }
	df = df.replace({'species':mapping})
	df = df[df['species']!=2]
	X = df[['petal_length', 'petal_width', 'sepal_length', 'sepal_width']].values.T
	X = normalized(X)
	Y = df[['species']].values.T
	Y = Y.astype('uint8')
	ALPHA = 1.2
	N_X = 4
	N_H = 5
	N_Y = 1
	parameters = check_initialize_parameters(N_X,N_H,N_Y)
	cache = check_forward_propagation(X, parameters)
	check_compute_cost(cache["A2"], Y, parameters)
	gradients = check_backward_propagation(parameters,cache, X, Y)
	parameters = check_update_parameters(parameters, gradients, ALPHA)
	check_predict(X, parameters)
